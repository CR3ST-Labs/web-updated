---
import TestmonialItem from "../TestmonialItem.astro";

type Props = {
  items: {
    src: string;
    title: string;
    message: string;
    name: string;
  }[];
};

const { items } = Astro.props;
---

<div id="default-carousel" class="relative w-full overflow-hidden" data-carousel="slide">
  <!-- Carousel wrapper -->
  <div class="relative flex flex-row md:gap-20 gap-16 md:px-20 carousel-container" id="carousel-container">
    {
      items.map((comp) => (
        <div class="carousel-item max-md:basis-full">
          <TestmonialItem {...comp} />
        </div>
      ))
    }
  </div>
  <!-- Slider controls -->
  <button
    type="button"
    class="absolute top-0 left-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group outline-none"
    data-carousel-prev
  >
    <span
      class="inline-flex items-center justify-center w-6 h-6 sm:w-10 smh-10 rounded-lg sm:rounded-xl bg-light-600 dark:bg-[#313539] group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
    >
      <svg
        class="w-3 h-3 sm:w-4 sm:h-4 text-white dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"
        ></path>
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group outline-none"
    data-carousel-next
  >
    <span
      class="inline-flex items-center justify-center w-6 h-6 sm:w-10 smh-10 rounded-lg sm:rounded-xl bg-light-600 dark:bg-[#313539] group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
    >
      <svg
        class="w-3 h-3 sm:w-4 sm:h-4 text-white dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"
        ></path>
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>

<style>
  .carousel-item {
    flex: 0 0 50%;
    scroll-snap-align: start;
  }

  @media not all and (min-width: 768px) {
    .max-md\:basis-full {
      flex-basis: 100%;
    }
  }

  .carousel-container {
    transition: transform 0.6s ease;
  }
</style>

<script>
  const container = document.getElementById("carousel-container")!;
  const nextBtn = document.querySelector("[data-carousel-next]");
  const prevBtn = document.querySelector("[data-carousel-prev]");
  const items = document.querySelectorAll(".carousel-item");

  let currentIndex = 0;
  let slideDistance = 50;
  let viewScreen = 2;
  
  if (window.screen.width < 768) {
    slideDistance = 100;
    viewScreen = 1;
  }

  window.addEventListener("resize", () => {
    if (window.screen.width < 768) {
      slideDistance = 100;
      viewScreen = 1;
    } else {
      slideDistance = 50;
      viewScreen = 2;
    }
  });
  
  const maxIndex = Math.ceil(items.length - 2);
  console.log(currentIndex, maxIndex);

  nextBtn?.addEventListener("click", () => {
    if (currentIndex < maxIndex) {
      container.style.transform = `translateX(-${(currentIndex + 1) * slideDistance}%)`;
      currentIndex++;
    }
  });

  prevBtn?.addEventListener("click", () => {
    if (currentIndex > 0) {
      container.style.transform = `translateX(-${(currentIndex - 1) * slideDistance}%)`;
      currentIndex--;
    }
  });
</script>
